# -*- coding: utf-8 -*-
"""Parcial_01

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cHludl8TenANlgEnTS49_R4ZrUYrAKi2
"""

!pip install pymongo

import requests
import pymongo

def fetch_nobel_data():
    url = "https://api.nobelprize.org/v1/prize.json"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()["prizes"]
    else:
        print("Error al obtener los datos de la API")
        return []

def save_to_mongodb(data):
    client = pymongo.MongoClient("mongodb+srv://dilan_291:1012449412Denis$@cluster0.hrhf9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
    db = client["nobel_db"]
    collection = db["nobel_prizes"]

    if data:
        collection.insert_many(data)
        print("Datos guardados en MongoDB correctamente.")
    else:
        print("No hay datos para guardar.")

def main():
    data = fetch_nobel_data()
    save_to_mongodb(data)

if __name__ == "__main__":
    main()

import pymongo  # Librería para conectarse y manipular bases de datos MongoDB
import matplotlib.pyplot as plt  # Librería para generar gráficos

# Función para obtener los datos desde MongoDB
def get_data_from_mongodb():
    # Conectar a la base de datos MongoDB utilizando la URI del cluster
    client = pymongo.MongoClient("mongodb+srv://dilan_291:1012449412Denis$@cluster0.hrhf9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
    db = client["nobel_db"]  # Seleccionamos la base de datos
    collection = db["nobel_prizes"]  # Seleccionamos la colección de premios Nobel

    # Recuperamos solo el campo "year" de cada documento, excluyendo el "_id"
    return list(collection.find({}, {"_id": 0, "year": 1}))

# Función para generar una gráfica de comparación de premios Nobel por periodos de tiempo
def generate_comparison_chart():
    data = get_data_from_mongodb()  # Obtener los datos de MongoDB
    years = {}  # Diccionario para contar los premios Nobel por año

    # Recorremos los datos obtenidos de la base de datos
    for entry in data:
        year = entry.get("year")  # Obtener el año del premio Nobel
        if year:
            # Convertimos el año a entero (en caso de que sea un string) y lo agregamos al diccionario
            years[int(year)] = years.get(int(year), 0) + 1

    # Ordenamos los años en orden ascendente
    sorted_years = sorted(years.keys())
    start_year = sorted_years[0]  # Primer año registrado
    end_year = sorted_years[-1]  # Último año registrado
    midpoint = sorted_years[len(sorted_years) // 2]  # Punto medio del rango de años

    # Dividimos los datos en dos mitades: antes y después del punto medio
    first_half_years = [year for year in sorted_years if year < midpoint]
    second_half_years = [year for year in sorted_years if year >= midpoint]

    # Contamos el total de premios Nobel en cada mitad del tiempo
    first_half_count = sum(years[year] for year in first_half_years)
    second_half_count = sum(years[year] for year in second_half_years)

    # Definimos las etiquetas de las barras con los rangos de años
    labels = [f"{start_year}-{midpoint-1}", f"{midpoint}-{end_year}"]
    values = [first_half_count, second_half_count]  # Valores de cada periodo

    # Crear la figura del gráfico
    plt.figure(figsize=(8, 6))
    plt.bar(labels, values, color=['royalblue', 'darkorange'], edgecolor='black')

    # Configurar etiquetas del gráfico
    plt.xlabel("Periodo de Tiempo")
    plt.ylabel("Número de Premios Nobel")
    plt.title("Comparación de Premios Nobel entre Periodos")

    # Agregar los valores sobre cada barra
    for i, value in enumerate(values):
        plt.text(i, value + 5, str(value), ha='center', fontsize=12, color='black')

    # Agregar una cuadrícula en el eje Y para mejorar la legibilidad
    plt.grid(axis='y', linestyle='--', alpha=0.7)

    # Mostrar la gráfica
    plt.show()

# Ejecutar la función si el script se ejecuta directamente
if __name__ == "__main__":
    generate_comparison_chart()